@startuml UniNest Platform - Simplified Entity Class Diagram

!theme plain
skinparam backgroundColor white
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam classHeaderBackgroundColor #E9ECEF
skinparam linetype ortho
skinparam nodesep 80
skinparam ranksep 100
skinparam classAttributeIconSize 0
skinparam classMethodIconSize 0

title "UniNest Platform - Core Entity Relationships"

' ===== CORE ENTITIES =====

class User {
    -id: Long
    -email: String
    -password: String
    -role: Role
    -enabled: boolean
    --
    +authenticate(): boolean
    +updateProfile(): void
    +getRolePermissions(): Set<String>
    -validatePassword(): boolean
}

class UserProfile {
    -id: Long
    -fullName: String
    -dateOfBirth: LocalDate
    -fieldOfStudy: String
    -userType: UserType
    --
    +updateInfo(): void
    +isComplete(): boolean
    +getDisplayName(): String
    -validateData(): boolean
}

class PropertyListing {
    -id: Long
    -title: String
    -price: BigDecimal
    -location: String
    -sourceType: SourceType
    -active: boolean
    --
    +activate(): void
    +deactivate(): void
    +updatePrice(BigDecimal): void
    +isActive(): boolean
    -validatePrice(): boolean
}

class Inquiry {
    -id: Long
    -message: String
    -timestamp: LocalDateTime
    -status: InquiryStatus
    --
    +reply(String): void
    +close(): void
    +isPending(): boolean
    +getFormattedDate(): String
    -updateTimestamp(): void
}

class RoommateAnnouncement {
    -id: Long
    -propertyTitle: String
    -totalRent: BigDecimal
    -maxRoommates: Integer
    -status: AnnouncementStatus
    --
    +activate(): void
    +expire(): void
    +updateStatus(): void
    +isActive(): boolean
    +getRentPerPerson(): BigDecimal
    -calculateExpiry(): LocalDateTime
}

class RoommateApplication {
    -id: Long
    -message: String
    -compatibilityScore: BigDecimal
    -status: ApplicationStatus
    --
    +accept(): void
    +reject(): void
    +withdraw(): void
    +isPending(): boolean
    +getScorePercentage(): int
    -updateStatus(ApplicationStatus): void
}

class Conversation {
    -id: Long
    -createdAt: LocalDateTime
    -updatedAt: LocalDateTime
    --
    +addParticipant(User): void
    +getLatestMessage(): Message
    +markAsRead(User): void
    +getUnreadCount(User): int
    +isParticipant(User): boolean
    -updateTimestamp(): void
}

class Message {
    -id: Long
    -content: String
    -timestamp: LocalDateTime
    -messageType: MessageType
    -isRead: boolean
    --
    +markAsRead(): void
    +getPreviewText(): String
    +getFormattedTime(): String
    +isTextMessage(): boolean
    -validateContent(): boolean
}

class ConnectionRequest {
    -id: Long
    -message: String
    -status: ConnectionStatus
    -createdAt: LocalDateTime
    --
    +accept(): void
    +reject(): void
    +isPending(): boolean
    +isAccepted(): boolean
    +canWithdraw(): boolean
    -updateStatus(ConnectionStatus): void
}

class RoommateMatch {
    -id: Long
    -compatibilityScore: BigDecimal
    -viewed: boolean
    -clicked: boolean
    --
    +markAsViewed(): void
    +markAsClicked(): void
    +getScorePercentage(): int
    +isHighCompatibility(): boolean
    -calculateCompatibility(): BigDecimal
}

' ===== RELATIONSHIPS =====

' Composition relationships (filled diamond) - Strong ownership
User *--> "1" UserProfile : owns

' Aggregation relationships (empty diamond) - Weak ownership  
User o--> "0..*" PropertyListing : creates
User o--> "0..*" RoommateAnnouncement : posts
User o--> "0..*" Message : sends

' Composition for containers
Conversation *--> "0..*" Message : contains
RoommateAnnouncement *--> "0..*" RoommateApplication : receives

' Association relationships (simple line) - References
User --> "0..*" Inquiry : submits as student
User --> "0..*" Inquiry : receives as owner
PropertyListing --> "0..*" Inquiry : subject of
User --> "0..*" RoommateApplication : applies with
User --> "0..*" ConnectionRequest : sends
User --> "0..*" ConnectionRequest : receives
User --> "0..*" RoommateMatch : receives recommendations
User -left-> "0..*" Conversation : initiates with connected users
RoommateAnnouncement --> "0..*" RoommateMatch : featured in
RoommateAnnouncement --> "0..*" Conversation : referenced in

' Many-to-many relationship
Conversation "0..*" -up-> "2..*" User : participants

' Reflexive association - User connections
User "0..*" --> "0..*" User : connected to

' Layout positioning to avoid conflicts
User -[hidden]down-> Inquiry
PropertyListing -[hidden]right-> RoommateAnnouncement
Conversation -[hidden]down-> Message
RoommateApplication -[hidden]right-> ConnectionRequest

' ===== ENUMS (Positioned at bottom) =====

' Force enums to bottom row
User -[hidden]down-> Role
UserProfile -[hidden]down-> UserType
PropertyListing -[hidden]down-> SourceType
Inquiry -[hidden]down-> InquiryStatus
RoommateAnnouncement -[hidden]down-> AnnouncementStatus
RoommateApplication -[hidden]down-> ApplicationStatus
Message -[hidden]down-> MessageType
ConnectionRequest -[hidden]down-> ConnectionStatus

enum Role {
    STUDENT
    OWNER
    ADMIN
}

enum UserType {
    STUDENT
    OWNER
}

enum SourceType {
    OWNER
    SCRAPED
}

enum InquiryStatus {
    PENDING
    REPLIED
    CLOSED
}

enum AnnouncementStatus {
    ACTIVE
    FILLED
    EXPIRED
}

enum ApplicationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum MessageType {
    TEXT
    IMAGE
    SYSTEM
}

enum ConnectionStatus {
    PENDING
    ACCEPTED
    REJECTED
}

@enduml 