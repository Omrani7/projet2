@startuml "Comprehensive Authentication System Class Diagram"

' Package definitions
package "Backend" {
  ' Main entities
  class User {
    -id: int
    -email: String
    -username: String
    -password: String
    -phoneNumber: String
    -provider: AuthProvider
    -providerId: String
    -enabled: boolean
    -role: UserRole
    +getProvider(): AuthProvider
    +setProvider(AuthProvider): void
    +getProviderId(): String
    +setProviderId(String): void
  }

  class UserProfile {
    -id: int
    -fullName: String
    -dateOfBirth: LocalDate
    -fieldOfStudy: String
    -university: String
    -userType: UserType
    -user: User
  }

  class PasswordResetToken {
    -id: Long
    -token: String
    -user: User
    -expiryDate: Date
    +PasswordResetToken(User user)
    +PasswordResetToken(User user, String token)
    -calculateExpiryDate(int expiryTimeInMinutes): Date
    +isExpired(): boolean
  }

  ' Enumerations
  enum AuthProvider {
    LOCAL
    GOOGLE
    GITHUB
  }

  enum UserRole {
    USER
    ADMIN
  }

  enum UserType {
    OWNER
    STUDENT
  }

  ' DTOs
  class SignupRequest {
    -email: String
    -username: String
    -password: String
    -phoneNumber: String
    -profileDetails: ProfileDetails
  }

  class ProfileDetails {
    -fullName: String
    -fieldOfStudy: String
    -university: String
    -userType: String
  }

  class LoginRequest {
    -email: String
    -password: String
  }

  class ForgotPasswordRequest {
    -email: String
  }

  class PasswordResetRequest {
    -token: String
    -password: String
    -confirmPassword: String
  }

  class AuthResponse {
    -token: String
    -userId: int
    -email: String
    -username: String
    -role: UserRole
  }

  ' Configuration
  class AppConfig {
    -frontendUrl: String
    +getFrontendUrl(): String
    +getOAuth2CallbackUrl(): String
    +getOAuth2CallbackUrlWithToken(String token): String
    +getOAuth2CallbackUrlWithError(String errorMessage): String
  }

  ' Services
  class UserService {
    -userRepo: UserRepo
    -userProfileRepo: UserProfileRepo
    -passwordResetTokenRepository: PasswordResetTokenRepository
    -emailService: EmailService
    -encoder: BCryptPasswordEncoder
    +saveUser(User user): User
    +registerUser(SignupRequest request): User
    +createPasswordResetTokenForUser(User user): PasswordResetToken
    +validatePasswordResetToken(String token): boolean
    +resetPassword(String token, String newPassword): boolean
    +sendPasswordResetEmail(String email): void
    +cleanExpiredPasswordResetTokens(): void
    +createOrUpdateOAuth2User(String email, String name, String providerId, AuthProvider provider): User
    +findByEmail(String email): User
    +findByUsername(String username): User
  }

  class UserDetailsServiceImpl {
    -userRepo: UserRepo
    +loadUserByUsername(String username): UserDetails
  }

  class EmailService {
    -mailSender: JavaMailSender
    -frontendUrl: String
    -fromEmail: String
    +sendPasswordResetEmail(String to, String token): void
    +logPasswordResetLink(String to, String token): void
  }

  class TokenService {
    -secretKey: String
    -expirationTime: Long
    +generateToken(User user): String
    +validateToken(String token): boolean
    +getUsernameFromToken(String token): String
  }

  ' Controllers
  class AuthController {
    -userService: UserService
    -tokenService: TokenService
    -authenticationManager: AuthenticationManager
    +register(SignupRequest request): ResponseEntity<?>
    +login(LoginRequest request): ResponseEntity<?>
    +logout(HttpServletRequest request): ResponseEntity<?>
  }

  class PasswordController {
    -userService: UserService
    +forgotPassword(ForgotPasswordRequest request): ResponseEntity<?>
    +resetPassword(PasswordResetRequest request): ResponseEntity<?>
    +validateToken(String token): ResponseEntity<?>
  }

  class OAuth2Controller {
    -userService: UserService
    -tokenService: TokenService
    -appConfig: AppConfig
    +handleOAuth2Success(HttpServletResponse response): void
    +handleOAuth2Error(HttpServletRequest request, HttpServletResponse response): void
    +logout(HttpServletRequest request, HttpServletResponse response): void
  }

  ' Repository interfaces
  interface UserRepo {
    +findUserByUsername(String username): User
    +findByEmail(String email): User
    +existsByEmail(String email): boolean
  }

  interface UserProfileRepo {
    +findByUserId(int userId): UserProfile
  }

  interface PasswordResetTokenRepository {
    +findByToken(String token): Optional<PasswordResetToken>
    +findByUser(User user): Optional<PasswordResetToken>
    +deleteAllExpiredTokens(Date now): void
  }

  ' Security configuration
  class SecurityConfig {
    -userDetailsService: UserDetailsService
    -jwtFilter: JwtFilter
    -oAuth2SuccessHandler: OAuth2SuccessHandler
    -oAuth2FailureHandler: OAuth2FailureHandler
    -authorizationRequestRepository: StatelessOAuth2AuthorizationRequestRepository
    -appConfig: AppConfig
    +securityFilterChain(HttpSecurity http): SecurityFilterChain
    +corsConfigurationSource(): CorsConfigurationSource
    +authenticationManager(AuthenticationConfiguration): AuthenticationManager
    +passwordEncoder(): BCryptPasswordEncoder
    +authProvider(): AuthenticationProvider
  }

  class JwtFilter {
    -userDetailsService: UserDetailsService
    -tokenService: TokenService
    +doFilterInternal(request, response, chain): void
  }

  class OAuth2SuccessHandler {
    -userService: UserService
    -tokenService: TokenService
    -authorizationRequestRepository: StatelessOAuth2AuthorizationRequestRepository
    -appConfig: AppConfig
    +onAuthenticationSuccess(request, response, authentication): void
  }

  class OAuth2FailureHandler {
    -appConfig: AppConfig
    -authorizationRequestRepository: StatelessOAuth2AuthorizationRequestRepository
    +onAuthenticationFailure(request, response, exception): void
  }

  class StatelessOAuth2AuthorizationRequestRepository {
    -authRequests: Map<String, OAuth2AuthorizationRequest>
    +loadAuthorizationRequest(request): OAuth2AuthorizationRequest
    +saveAuthorizationRequest(authRequest, request, response): void
    +removeAuthorizationRequest(request, response): OAuth2AuthorizationRequest
  }

  class UserPrincipal {
    -user: User
    +getAuthorities(): Collection<GrantedAuthority>
    +getPassword(): String
    +getUsername(): String
    +getEmail(): String
    +getId(): int
    +getRole(): UserRole
    +isAccountNonExpired(): boolean
    +isAccountNonLocked(): boolean
    +isCredentialsNonExpired(): boolean
    +isEnabled(): boolean
  }
}

package "Frontend" {
  ' Angular components
  class LoginComponent {
    -email: String
    -password: String
    -isPasswordVisible: boolean
    -errorMessage: String
    -isLoggingIn: boolean
    -isGoogleLoginInProgress: boolean
    -router: Router
    -authService: AuthService
    +closeModalEvent: EventEmitter<void>
    +continueWithEmail(): void
    +loginWithGoogle(): void
    +closeModal(): void
  }

  class AuthStatusComponent {
    -isAuthenticated: boolean
    -authSubscription: Subscription
    -authService: AuthService
    +ngOnInit(): void
    +ngOnDestroy(): void
  }

  class HomeComponent {
    -isLoginModalOpen: boolean
    -isUserLoggedIn: boolean
    -authSubscription: Subscription
    -logoutInProgress: boolean
    -router: Router
    -authService: AuthService
    +ngOnInit(): void
    +ngOnDestroy(): void
    +login(): void
    +logout(): void
    +isLoggedIn(): boolean
    +closeLoginModal(): void
  }

  class ForgotPasswordComponent {
    -email: String
    -errorMessage: String
    -successMessage: String
    -isSubmitting: boolean
    +submitForgotPassword(): void
    +goToLogin(): void
    +closeModal(): void
  }

  class ResetPasswordComponent {
    -token: String
    -password: String
    -confirmPassword: String
    -errorMessage: String
    -successMessage: String
    -isSubmitting: boolean
    -isValidToken: boolean
    -isLoading: boolean
    +ngOnInit(): void
    +validateToken(): void
    +resetPassword(): void
    +goToLogin(): void
  }

  class OAuth2CallbackComponent {
    -loading: boolean
    -error: boolean
    -errorMessage: String
    -token: String
    -router: Router
    -route: ActivatedRoute
    -authService: AuthService
    -http: HttpClient
    +ngOnInit(): void
    +retry(): void
  }

  ' Angular services
  class AuthService {
    -apiUrl: String
    -tokenKey: String
    -http: HttpClient
    -router: Router
    -authStateSubject: BehaviorSubject<boolean>
    +authState$: Observable<boolean>
    -hasValidToken(): boolean
    -checkTokenValidity(): void
    +login(email, password): Observable<any>
    +register(userData): Observable<any>
    +forgotPassword(email): Observable<any>
    +validateResetToken(token): Observable<any>
    +resetPassword(token, password, confirmPassword): Observable<any>
    +oauthLogin(provider): void
    +logout(): Observable<any>
    +isLoggedIn(): boolean
    +getToken(): String
    +saveToken(token): void
    +handleOAuth2Callback(): Observable<any>
    -handleError<T>(operation: String): Function
  }
}

' Relationships with proper UML notation

' Entity relationships
Backend.User "1" *---> "1" Backend.UserProfile : contains
Backend.User "1" *---> "0..*" Backend.PasswordResetToken : contains
Backend.User ..> Backend.AuthProvider : uses
Backend.User ..> Backend.UserRole : uses
Backend.UserProfile ..> Backend.UserType : uses
Backend.SignupRequest *---> Backend.ProfileDetails : contains

' Service dependencies 
Backend.UserService ..> Backend.User : creates/manipulates
Backend.UserService ..> Backend.UserProfile : creates/manipulates
Backend.UserService ..> Backend.PasswordResetToken : creates/manages
Backend.UserService ..> Backend.SignupRequest : processes
Backend.UserService --> Backend.UserRepo : uses
Backend.UserService --> Backend.UserProfileRepo : uses
Backend.UserService --> Backend.PasswordResetTokenRepository : uses
Backend.UserService --> Backend.EmailService : uses
Backend.UserService ..> Backend.BCryptPasswordEncoder : uses for password hashing

Backend.EmailService ..> Backend.PasswordResetToken : uses token info

Backend.TokenService ..> Backend.User : creates token for

Backend.UserDetailsServiceImpl --> Backend.UserRepo : uses
Backend.UserDetailsServiceImpl ..> Backend.UserPrincipal : creates
Backend.UserPrincipal ..> Backend.User : wraps

' Controller dependencies
Backend.AuthController --> Backend.UserService : uses
Backend.AuthController --> Backend.TokenService : uses
Backend.AuthController ..> Backend.AuthenticationManager : uses
Backend.AuthController ..> Backend.SignupRequest : processes
Backend.AuthController ..> Backend.LoginRequest : processes
Backend.AuthController ..> Backend.AuthResponse : creates
Backend.AuthController ..> Backend.HttpServletRequest : uses in logout

Backend.PasswordController --> Backend.UserService : uses
Backend.PasswordController ..> Backend.ForgotPasswordRequest : processes
Backend.PasswordController ..> Backend.PasswordResetRequest : processes

Backend.OAuth2Controller --> Backend.UserService : uses
Backend.OAuth2Controller --> Backend.TokenService : uses
Backend.OAuth2Controller --> Backend.AppConfig : uses

' Security component dependencies
Backend.SecurityConfig --> Backend.UserDetailsService : uses
Backend.SecurityConfig --> Backend.JwtFilter : uses
Backend.SecurityConfig --> Backend.OAuth2SuccessHandler : uses
Backend.SecurityConfig --> Backend.OAuth2FailureHandler : uses
Backend.SecurityConfig --> Backend.StatelessOAuth2AuthorizationRequestRepository : uses
Backend.SecurityConfig --> Backend.AppConfig : uses

Backend.JwtFilter --> Backend.UserDetailsService : uses
Backend.JwtFilter --> Backend.TokenService : uses

Backend.OAuth2SuccessHandler --> Backend.UserService : uses
Backend.OAuth2SuccessHandler --> Backend.TokenService : uses
Backend.OAuth2SuccessHandler --> Backend.StatelessOAuth2AuthorizationRequestRepository : uses
Backend.OAuth2SuccessHandler --> Backend.AppConfig : uses

Backend.OAuth2FailureHandler --> Backend.StatelessOAuth2AuthorizationRequestRepository : uses
Backend.OAuth2FailureHandler --> Backend.AppConfig : uses

' Angular component dependencies
Frontend.LoginComponent --> Frontend.AuthService : uses
Frontend.ForgotPasswordComponent --> Frontend.AuthService : uses
Frontend.ResetPasswordComponent --> Frontend.AuthService : uses
Frontend.HomeComponent --> Frontend.AuthService : uses
Frontend.HomeComponent --> Frontend.LoginComponent : contains
Frontend.OAuth2CallbackComponent --> Frontend.AuthService : uses
Frontend.AuthStatusComponent --> Frontend.AuthService : subscribes to

' Cross-package relationships
Frontend.AuthService ..> Backend.AuthController : HTTP requests
Frontend.AuthService ..> Backend.OAuth2Controller : OAuth2 flow
Frontend.AuthService ..> Backend.PasswordController : Password operations

@enduml 