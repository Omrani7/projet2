spring.application.name=spring-security

# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/spring
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:0000}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto= update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# LocationIQ Geocoding API configuration
geocoding.locationiq.api-key= pk.8771f297ae79ceab4259e80555bc4a28
geocoding.locationiq.enabled=true


# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.example.spring_security=DEBUG

# JWT Configuration - Use environment variables 
jwt.secret.key=${JWT_SECRET:your_secret_key_here_should_be_at_least_256_bits}
jwt.expiration.time=86400000

# OAuth2 Google Configuration - Use environment variables
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:345570104413-6faifa06otoes09beriusbv5b1sl4sng.apps.googleusercontent.com}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET: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}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# OAuth2 Provider configurations
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# CORS Configuration
spring.web.cors.allowed-origins=http://localhost:4200
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Server and Session Configuration
server.port=8080
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.same-site=none
spring.servlet.multipart.enabled=true

# Frontend URL for redirects (password reset links, etc.)
app.frontend-url=http://localhost:4200

# Email Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME:mohamedommmani32@gmail.com}
spring.mail.password=${MAIL_PASSWORD:tdjp sege qger jmck}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Scraping Module Configuration
scraper.module.base-url=http://localhost:8081

# Scraper Scheduling Configuration
scraper.scheduling.enabled=false # Set to false to disable scheduled scraper runs 