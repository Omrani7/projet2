spring.application.name=spring-security
#spring.security.user.name=telusko
#spring.security.user.password=1234

spring.profiles.active=dev

# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/spring
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.example.spring_security=DEBUG
logging.level.com.example.spring_security.service.geocoding=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG

# JWT Configuration
jwt.secret.key=${JWT_SECRET}
jwt.expiration.time=86400000

# OAuth2 Google Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# OAuth2 Provider configurations
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# CORS Configuration
spring.web.cors.allowed-origins=http://localhost:4200
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Server port
server.port=8080

# Server and Session Configuration
server.servlet.session.timeout=30m
server.servlet.session.cookie.name=JSESSIONID
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=none
spring.servlet.multipart.enabled=true

# Add these email configuration properties

# Frontend URL for redirects (password reset links, etc.)
app.frontend-url=http://localhost:4200

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:your_email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your_email_password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Scraper Configuration
scraper.scheduling.enabled=true
scraper.immobilier.schedule=0 0 */6 * * *
scraper.batch-size=50

# LocationIQ Geocoding API configuration
geocoding.locationiq.api-key=pk.8771f297ae79ceab4259e80555bc4a28
geocoding.locationiq.enabled=true

# Playwright MCP Configuration
playwright.mcp.headless=false
playwright.mcp.enabled=true

# Add configuration for scraper module
scraper.base-url=http://localhost:8081

