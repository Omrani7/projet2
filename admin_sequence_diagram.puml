@startuml Admin Dashboard Sequence Diagram

actor Admin
participant "Admin Dashboard UI" as UI
participant "AdminController" as Controller
participant "AdminService" as Service
participant "Database" as DB
participant "File System" as FS
participant "Scraper Module" as Scraper

== Dashboard Overview ==
Admin -> UI: Access Admin Dashboard
UI -> Controller: GET /api/admin/stats/overview
Controller -> Service: getOverviewStats()
Service -> DB: Query users, properties, inquiries, announcements
DB --> Service: Return statistics data
Service --> Controller: AdminStatsDto
Controller --> UI: Dashboard statistics
UI --> Admin: Display dashboard with metrics

== Quick Action: Manage Users ==
Admin -> UI: Click "Manage Users"
UI -> Controller: GET /api/admin/users?page=0&size=20
Controller -> Service: getAllUsers(pageable, search, role)
Service -> DB: Query users with pagination
DB --> Service: Page<User>
Service --> Controller: Page<AdminUserDto>
Controller --> UI: Users list
UI --> Admin: Display users table

Admin -> UI: Search users by filters
UI -> Controller: GET /api/admin/users?search=john&role=STUDENT
Controller -> Service: getAllUsers(pageable, "john", "STUDENT")
Service -> DB: Query users with search filters
DB --> Service: Filtered Page<User>
Service --> Controller: Page<AdminUserDto>
Controller --> UI: Filtered users list
UI --> Admin: Display filtered results

Admin -> UI: Update user role
UI -> Controller: PUT /api/admin/users/{userId}/role
Controller -> Service: updateUserRole(userId, newRole)
Service -> DB: UPDATE users SET role = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "User role updated"
UI --> Admin: Show success notification

Admin -> UI: Delete user
UI -> Controller: DELETE /api/admin/users/{userId}
Controller -> Service: deleteUser(userId)
Service -> DB: DELETE FROM users WHERE id = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "User deleted"
UI --> Admin: Show success notification

== Quick Action: Manage Properties ==
Admin -> UI: Click "Manage Properties"
UI -> Controller: GET /api/admin/properties?page=0&size=20
Controller -> Service: getAllProperties(pageable, search, status)
Service -> DB: Query properties with filters
DB --> Service: Page<PropertyListing>
Service --> Controller: Page<AdminPropertyDto>
Controller --> UI: Properties list
UI --> Admin: Display properties table

Admin -> UI: Search properties by filters
UI -> Controller: GET /api/admin/properties?search=apartment&status=ACTIVE
Controller -> Service: getAllProperties(pageable, "apartment", "ACTIVE")
Service -> DB: Query properties with search filters
DB --> Service: Filtered Page<PropertyListing>
Service --> Controller: Page<AdminPropertyDto>
Controller --> UI: Filtered properties list
UI --> Admin: Display filtered results

Admin -> UI: Edit property status
UI -> Controller: PUT /api/admin/properties/{propertyId}/status
Controller -> Service: updatePropertyStatus(propertyId, newStatus)
Service -> DB: UPDATE properties SET status = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "Property status updated"
UI --> Admin: Show success notification

Admin -> UI: View property details
UI -> Controller: GET /api/admin/properties/{propertyId}
Controller -> Service: getPropertyById(propertyId)
Service -> DB: SELECT * FROM properties WHERE id = ?
DB --> Service: PropertyListing with full details
Service --> Controller: AdminPropertyDetailDto
Controller --> UI: Property details
UI --> Admin: Display property details modal/page

Admin -> UI: Delete property
UI -> Controller: DELETE /api/admin/properties/{propertyId}
Controller -> Service: deleteProperty(propertyId)
Service -> DB: DELETE FROM properties WHERE id = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "Property deleted"
UI --> Admin: Show success notification

== Quick Action: Manage Roommates ==
Admin -> UI: Click "Manage Roommates"
UI -> Controller: GET /api/admin/roommate-announcements?page=0&size=20
Controller -> Service: getAllRoommateAnnouncements(pageable, search, status)
Service -> DB: Query announcements with filters
DB --> Service: Page<RoommateAnnouncement>
Service --> Controller: Page<AdminRoommateAnnouncementDto>
Controller --> UI: Announcements list
UI --> Admin: Display announcements table

Admin -> UI: Search announcements by filters
UI -> Controller: GET /api/admin/roommate-announcements?search=student&status=ACTIVE
Controller -> Service: getAllRoommateAnnouncements(pageable, "student", "ACTIVE")
Service -> DB: Query announcements with search filters
DB --> Service: Filtered Page<RoommateAnnouncement>
Service --> Controller: Page<AdminRoommateAnnouncementDto>
Controller --> UI: Filtered announcements list
UI --> Admin: Display filtered results

Admin -> UI: Update announcement status
UI -> Controller: PUT /api/admin/roommate-announcements/{id}/status
Controller -> Service: updateRoommateAnnouncementStatus(id, status)
Service -> DB: UPDATE announcements SET status = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "Status updated"
UI --> Admin: Show success notification

Admin -> UI: View announcement details
UI -> Controller: GET /api/admin/roommate-announcements/{id}
Controller -> Service: getRoommateAnnouncementById(id)
Service -> DB: SELECT * FROM announcements WHERE id = ?
DB --> Service: RoommateAnnouncement with full details
Service --> Controller: AdminRoommateAnnouncementDetailDto
Controller --> UI: Announcement details
UI --> Admin: Display announcement details modal/page

Admin -> UI: Delete announcement
UI -> Controller: DELETE /api/admin/roommate-announcements/{id}
Controller -> Service: deleteRoommateAnnouncement(id)
Service -> DB: DELETE FROM announcements WHERE id = ?
DB --> Service: Success
Service --> Controller: Success message
Controller --> UI: "Announcement deleted"
UI --> Admin: Show success notification

== Quick Action: Export Reports ==
Admin -> UI: Click "Export Reports"
UI --> Admin: Show export options (Users, Properties, Announcements)

Admin -> UI: Select "Export Users CSV"
UI -> Controller: POST /api/admin/export/users {"format": "csv"}
Controller -> Service: exportUsersReport("csv")
Service -> DB: SELECT * FROM users
DB --> Service: List<User>
Service -> Service: generateUsersCSV(users, fileName)
Service -> FS: Save CSV to reports/users_report_timestamp.csv
FS --> Service: File saved successfully
Service --> Controller: fileName
Controller --> UI: "Report generated: /path/to/file"
UI --> Admin: Show file path and success message

== Scraper Management ==
Admin -> UI: Click "Trigger Scraper"
UI -> Controller: POST /api/admin/scraper/trigger
Controller -> Scraper: triggerScraping()
Scraper --> Controller: "Scraping triggered successfully" or "Scraping failed to start"
Controller --> UI: Scraper trigger message
UI --> Admin: Show scraper trigger status message

note over Admin, Scraper: Admin waits for scraping to complete

Scraper -> Controller: Scraping completion notification
Controller --> UI: "Scraping finished successfully" or "Scraping failed"
UI --> Admin: Show scraping completion message

@enduml 