In Sprint 2 (“User Profiles & Announcement CRUD”), the application must deliver a first “Discovery View” where users immediately see both a map with property pins and a synchronized list of listings, alongside a search bar with filters (university/institute, housing type, budget, and distance). Backend endpoints will support filtered retrieval, pagination, and full CRUD for profiles and announcements, while the frontend will implement reactive forms for profiles and announcements, a DiscoveryComponent combining SearchBarComponent, AnnouncementListComponent, and map integration, plus detail and profile pages. By sprint's end, users can create, update, delete, and view listings both in a list and on a map, with profile management fully operational.

1. Initial User Experience (“Discovery View”)
Map + List: Upon landing, show an interactive map centered on Tunisia (or user's location), with pins representing recent or featured announcements (*specific initial view TBD based on data availability*). A sidebar or section beneath displays corresponding announcement cards (image preview, title, price, and approximate distance) in real time.
*Map Interaction: Clicking a map pin opens an info window with key announcement details and a 'View Details' button. Clicking an item in the list highlights and centers the corresponding map pin.*
Atlassian
.

Search & Filters:

Autocomplete field for selecting University/Institute from your database.

Dropdowns for housing type (Studio, S+1, S+2, etc.).

Budget slider for min/max price.

Distance slider (e.g., 500 m, 1 km, 2 km) around the selected institute.

A "Search" button or reactive filter that updates both map pins and list dynamically 
Asana
.

2. Back-End Refinement
Endpoints:

GET /announcements?univId=&instId=&type=&minPrice=&maxPrice=&radius=&lat=&lng=&page=&size=

Returns a paginated list of announcements matching filters, including latitude/longitude for each (postGIS or calculated via Haversine).

Full CRUD for /profiles and /announcements (POST, PUT, DELETE), each triggering your GeocodingService to store coordinates *for the announcement's address*.
*Authorization: Only logged-in users with the OWNER role can create/update/delete announcements. Users can only update/delete their own profiles.*
*Data Assumption: Assumes University/Institute data, including names and coordinates, is pre-loaded into the database.*
Jira apps for agile teams | Easy Agile
.

Pagination & Sorting: Support sorting by publication date, price, or proximity.

Validation: Enforce server-side checks (e.g., min ≤ max price, radius within acceptable bounds).

Distance Calculation:

Option A: Use PostGIS functions (ST_Distance) in SQL.

Option B: Compute in Java with the Haversine formula for sorting by nearest 
Project Management Stack Exchange
.

3. Front-End Components & Data Flow
DiscoveryComponent

Hosts the map (*using Google Maps API*) and the announcement list.

Listens to (searchChanged) events from the SearchBarComponent.

SearchBarComponent

Reactive form with autocomplete for universities/institutes, housing type dropdowns, and budget/distance sliders.

Emits filter changes to update the view.

AnnouncementCardComponent

Displays a listing preview (photo, title, price, distance).

Click navigates to AnnouncementDetailComponent.

ProfileFormComponent

Reactive form (FormGroup) for creating/editing user profiles.

Services

AnnouncementService: search(filters), get(id), create(), update(), delete().

ProfileService: getProfile(), saveProfile().

Optional MapService: wraps map initialization and marker management 
Notion
.

Routing

/ → DiscoveryComponent

/announcements/:id → AnnouncementDetailComponent

/profile → ProfileFormComponent 
Microsoft Answers
.

4. Definition of Done for Sprint 2
Backend

CRUD endpoints for profiles and announcements fully implemented and tested (unit/integration), *enforcing correct authorization rules (OWNER for announcements, self for profiles)*.

Filtered search endpoint returns correct, paginated results with coordinates.

Frontend

Discovery view: map + list update reactively on filter changes.
*Map pins and list items interact as specified (info windows, centering).*

Profile creation/editing flow functional.

Announcement form component supports create/update/delete.

UX/UI

Responsive design for both desktop and mobile.

Search bar with auto-suggest and sliders behaves smoothly.

Loading indicators (spinners) on API calls and empty-state messages for "no results." 
Halo Lab
.

5. Considerations & Next Steps
Performance: Implement lazy-loading of announcements and markers, debounce filter inputs.

Error Handling: Show user-friendly messages on API errors, timeouts, or zero results.

*Data Sources: Institute data (including coordinates) will be manually gathered and seeded. Announcement data will primarily come from ongoing scraping efforts.*

End-to-End Testing: Plan Cypress or Playwright tests for key flows (search, map interaction, CRUD).

Accessibility: Ensure ARIA labels on map controls and form elements. 