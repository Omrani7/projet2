  @startuml Inquiry_Management_Sequence_Diagram

  !theme plain
  title "Inquiry Management - Main Flow Sequence Diagram"

  ' Main Actors and Systems
  actor "Student" as Student
  participant "Frontend\nApp" as Frontend
  participant "Inquiry\nService" as InquiryService
  participant "Notification\nService" as NotificationService
  participant "Database" as DB
  actor "Owner" as Owner
  actor "Student B" as StudentB
  actor "Student C" as StudentC

  == 1. STUDENT CREATES INQUIRY ==

  activate Student
  ref over Student, Owner : Student Creates Inquiry
  deactivate Student

  == 2. OWNER VIEWS AND RESPONDS ==

  activate Owner
  Owner -> Frontend: Login and check inquiries
  activate Frontend
  Frontend -> InquiryService: GET /api/v1/inquiries/owner/{id}
  activate InquiryService

  InquiryService -> DB: Fetch owner's inquiries with student details
  activate DB
  DB --> InquiryService: List of inquiries
  deactivate DB

  InquiryService --> Frontend: Inquiry list
  deactivate InquiryService
  Frontend --> Owner: Display student inquiries

  Owner -> Frontend: Select inquiry and compose response
  Owner -> Frontend: Submit response
  Frontend -> InquiryService: PUT /api/v1/inquiries/{id}/respond
  activate InquiryService

  InquiryService -> DB: Update inquiry (status: REPLIED, add response)
  activate DB
  DB --> InquiryService: Updated
  deactivate DB

  InquiryService -> NotificationService: Notify student of response
  activate NotificationService
  NotificationService -> DB: Save notification
  NotificationService -> Student: Send email notification
  NotificationService -> NotificationService: Send email to student
  deactivate NotificationService

  InquiryService --> Frontend: Response sent (200)
  deactivate InquiryService
  Frontend --> Owner: Success confirmation
  deactivate Frontend
  deactivate Owner

  == 3. STUDENT VIEWS RESPONSE ==

  activate Student
  ref over Student, Owner : Student Views Response
  deactivate Student

  == 4. MULTIPLE STUDENTS SCENARIO ==

  note over Student, Owner
    **Realistic Scenario**: Multiple students can inquire
    about the same property simultaneously
  end note

  StudentB -> Frontend: Send inquiry for same property
  activate StudentB
  activate Frontend
  Frontend -> InquiryService: POST /api/v1/inquiries (Property X)
  activate InquiryService
  InquiryService -> DB: Save inquiry (Student B → Property X)
  activate DB
  DB --> InquiryService: Inquiry saved
  deactivate DB
  InquiryService --> Frontend: Inquiry created
  deactivate InquiryService
  Frontend --> StudentB: Confirmation
  deactivate Frontend
  deactivate StudentB

  StudentC -> Frontend: Send inquiry for same property
  activate StudentC
  activate Frontend
  Frontend -> InquiryService: POST /api/v1/inquiries (Property X)
  activate InquiryService
  InquiryService -> DB: Save inquiry (Student C → Property X)
  activate DB
  DB --> InquiryService: Inquiry saved
  deactivate DB
  InquiryService --> Frontend: Inquiry created
  deactivate InquiryService
  Frontend --> StudentC: Confirmation
  deactivate Frontend
  deactivate StudentC

  activate Owner
  Owner -> Frontend: View all inquiries for Property X
  activate Frontend
  Frontend -> InquiryService: GET /api/v1/inquiries/property/{propertyId}
  activate InquiryService
  InquiryService -> DB: Fetch all inquiries for Property X
  activate DB
  DB --> InquiryService: [Student A, Student B, Student C inquiries]
  deactivate DB
  InquiryService --> Frontend: All inquiries for Property X
  deactivate InquiryService
  Frontend --> Owner: Display all student inquiries

  Owner -> Frontend: Respond to all interested students
  Owner -> Frontend: Choose Student A and close deal
  Frontend -> InquiryService: PUT /api/v1/inquiries/{studentA-inquiry}/close-deal
  activate InquiryService

  ' Update the chosen student's inquiry
  InquiryService -> DB: Update Student A inquiry (status: CLOSED)
  activate DB

  ' Update property status
  InquiryService -> DB: Update Property X (status: RENTED)

  ' Impact on other students' inquiries
  InquiryService -> DB: Update other inquiries for Property X\n(status: PROPERTY_NO_LONGER_AVAILABLE)
  DB --> InquiryService: Updated all related inquiries
  deactivate DB

  ' Notifications
  activate Student
  InquiryService -> NotificationService: Notify Student A (deal confirmed)
  activate NotificationService
  NotificationService -> Student: Send deal confirmation email
  NotificationService -> Student: Send WebSocket notification (deal confirmed)
  InquiryService -> NotificationService: Notify Students B & C (property unavailable)
  NotificationService -> StudentB: Send property unavailable email
  NotificationService -> StudentC: Send property unavailable email
  NotificationService -> NotificationService: Send emails to all affected students
  deactivate NotificationService

  InquiryService --> Frontend: Deal processed, other inquiries updated
  deactivate InquiryService
  Frontend --> Owner: Deal confirmed with Student A
  deactivate Frontend
  deactivate Owner

  ' Student A can now access his closed deal
  Student -> Frontend: Access "Closed Deals" section (available in profile)
  activate Frontend
  Frontend -> InquiryService: GET /api/v1/inquiries/student/closed-deals
  activate InquiryService
  InquiryService -> DB: Fetch Student A's closed deals
  activate DB
  DB --> InquiryService: Closed deal with Property X details
  deactivate DB
  InquiryService --> Frontend: Closed deal information
  deactivate InquiryService
  Frontend --> Student: Display confirmed rental in "Closed Deals"
  deactivate Frontend
  deactivate Student

  @enduml 